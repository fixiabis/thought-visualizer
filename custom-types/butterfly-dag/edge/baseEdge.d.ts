export default BaseEdge;
declare class BaseEdge extends Edge {
    constructor(opts: any);
    id: any;
    targetNode: any;
    _targetType: any;
    targetEndpoint: any;
    sourceNode: any;
    _sourceType: any;
    sourceEndpoint: any;
    type: any;
    orientationLimit: any;
    shapeType: any;
    hasRadius: any;
    label: any;
    arrow: any;
    arrowShapeType: any;
    arrowPosition: any;
    arrowOffset: any;
    labelPosition: any;
    labelOffset: any;
    isExpandWidth: any;
    defaultAnimate: any;
    dom: any;
    labelDom: any;
    arrowDom: SVGImageElement | SVGPathElement;
    eventHandlerDom: SVGPathElement;
    _hasEventListener: boolean;
    _coordinateService: any;
    __type: string;
    _path: string;
    options: any;
    _isDeletingEdge: any;
    _global: any;
    _on: any;
    _emit: any;
    _labelWidth: number;
    _labelHeight: number;
    _updateTimer: any;
    _UPDATE_INTERVAL: any;
    _sourcePoint: any;
    _targetPoint: any;
    _zIndex: number;
    draggable: any;
    _breakPoints: any;
    _hasDragged: boolean;
    _init(obj: any): void;
    _isInited: boolean;
    draw(obj: any): SVGPathElement;
    mounted(): void;
    _calcPath(sourcePoint: any, targetPoint: any): string;
    drawLabel(label: any): any;
    updateLabel(label: any): void;
    redrawArrow(path: any): void;
    arrowFinalPosition: any;
    drawArrow(arrow: any): SVGImageElement | SVGPathElement;
    redraw(sourcePoint: any, targetPoint: any, options: any): void;
    isConnect(): boolean;
    addAnimate(options: any): void;
    animateDom: any;
    redrawAnimate(): void;
    emit(type: any, data: any): void;
    on(type: any, callback: any): void;
    setZIndex(index: any): void;
    destroy(isNotEventEmit: any): void;
    getBreakPoints(): any;
    _addEventListener(): void;
    _create(opts: any): void;
    _updatePath(path: any, pos: any): void;
}
import Edge from '../interface/edge';
